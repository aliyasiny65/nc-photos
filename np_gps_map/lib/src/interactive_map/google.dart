import 'dart:async';

import 'package:flutter/material.dart';
import 'package:google_maps_cluster_manager/google_maps_cluster_manager.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:latlong2/latlong.dart' as type;
import 'package:np_common/object_util.dart';
import 'package:np_gps_map/src/interactive_map.dart';
import 'package:np_gps_map/src/map_coord.dart';
import 'package:np_gps_map/src/type.dart' as type;

typedef GoogleClusterBuilder = FutureOr<BitmapDescriptor> Function(
    BuildContext context, List<DataPoint> dataPoints);

class GoogleInteractiveMap extends StatefulWidget {
  const GoogleInteractiveMap({
    super.key,
    this.initialPosition,
    this.initialZoom,
    this.dataPoints,
    this.clusterBuilder,
    this.onClusterTap,
    this.contentPadding,
    this.onMapCreated,
    this.onCameraMove,
  });

  @override
  State<StatefulWidget> createState() => _GoogleInteractiveMapState();

  final MapCoord? initialPosition;
  final double? initialZoom;
  final List<DataPoint>? dataPoints;
  final GoogleClusterBuilder? clusterBuilder;
  final void Function(List<DataPoint> dataPoints)? onClusterTap;
  final EdgeInsets? contentPadding;
  final void Function(InteractiveMapController controller)? onMapCreated;
  final void Function(type.CameraPosition position)? onCameraMove;
}

class _GoogleInteractiveMapState extends State<GoogleInteractiveMap> {
  @override
  void didUpdateWidget(covariant GoogleInteractiveMap oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.dataPoints != oldWidget.dataPoints) {
      _clusterManager.setItems(widget.dataPoints
              ?.map((e) => _GoogleDataPoint(original: e))
              .toList() ??
          []);
    }
  }

  @override
  Widget build(BuildContext context) {
    return GoogleMap(
      mapType: MapType.normal,
      initialCameraPosition: widget.initialPosition?.let((e) => CameraPosition(
                target: widget.initialPosition!.toLatLng(),
                zoom: widget.initialZoom ?? 10,
              )) ??
          const CameraPosition(target: LatLng(0, 0)),
      markers: _markers,
      onMapCreated: _onMapCreated,
      onCameraMove: (position) {
        _clusterManager.onCameraMove(position);
        widget.onCameraMove?.call(type.CameraPosition(
          center: type.LatLng(
            position.target.latitude,
            position.target.longitude,
          ),
          zoom: position.zoom,
          rotation: position.bearing,
        ));
      },
      onCameraIdle: _clusterManager.updateMap,
      padding: widget.contentPadding ?? EdgeInsets.zero,
    );
  }

  void _onMapCreated(GoogleMapController controller) {
    _parentController = _ParentController(controller);
    widget.onMapCreated?.call(_parentController!);

    _clusterManager.setMapId(controller.mapId);

    if (Theme.of(context).brightness == Brightness.dark) {
      controller.setMapStyle(_mapStyleNight);
    }
  }

  late final _clusterManager = ClusterManager<_GoogleDataPoint>(
    const [],
    (markers) {
      if (mounted) {
        setState(() {
          _markers = markers;
        });
      }
    },
    markerBuilder: (cluster) async {
      final dataPoints = cluster.items.map((e) => e.original).toList();
      return Marker(
        markerId: MarkerId(cluster.getId()),
        position: cluster.location,
        onTap: () {
          widget.onClusterTap?.call(dataPoints);
        },
        icon: await widget.clusterBuilder?.call(context, dataPoints) ??
            BitmapDescriptor.defaultMarker,
      );
    },
  );

  _ParentController? _parentController;
  var _markers = <Marker>{};
}

class _GoogleDataPoint implements ClusterItem {
  const _GoogleDataPoint({
    required this.original,
  });

  @override
  LatLng get location => original.position.toLatLng();

  @override
  String get geohash =>
      Geohash.encode(location, codeLength: ClusterManager.precision);

  final DataPoint original;
}

class _ParentController implements InteractiveMapController {
  const _ParentController(this.controller);

  @override
  void setPosition(MapCoord position) {
    controller
        .animateCamera(CameraUpdate.newLatLngZoom(position.toLatLng(), 10));
  }

  final GoogleMapController controller;
}

extension on MapCoord {
  LatLng toLatLng() => LatLng(latitude, longitude);
}

// Generated by https://mapstyle.withgoogle.com/
const _mapStyleNight =
    '[{"elementType":"geometry","stylers":[{"color":"#242f3e"}]},{"elementType":"labels.text.fill","stylers":[{"color":"#746855"}]},{"elementType":"labels.text.stroke","stylers":[{"color":"#242f3e"}]},{"featureType":"administrative.locality","elementType":"labels.text.fill","stylers":[{"color":"#d59563"}]},{"featureType":"poi","elementType":"labels.text.fill","stylers":[{"color":"#d59563"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#263c3f"}]},{"featureType":"poi.park","elementType":"labels.text.fill","stylers":[{"color":"#6b9a76"}]},{"featureType":"road","elementType":"geometry","stylers":[{"color":"#38414e"}]},{"featureType":"road","elementType":"geometry.stroke","stylers":[{"color":"#212a37"}]},{"featureType":"road","elementType":"labels.text.fill","stylers":[{"color":"#9ca5b3"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#746855"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#1f2835"}]},{"featureType":"road.highway","elementType":"labels.text.fill","stylers":[{"color":"#f3d19c"}]},{"featureType":"transit","elementType":"geometry","stylers":[{"color":"#2f3948"}]},{"featureType":"transit.station","elementType":"labels.text.fill","stylers":[{"color":"#d59563"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#17263c"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"color":"#515c6d"}]},{"featureType":"water","elementType":"labels.text.stroke","stylers":[{"color":"#17263c"}]}]';
